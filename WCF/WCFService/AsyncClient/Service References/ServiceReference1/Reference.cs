//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AsyncClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MachineDTO", Namespace="http://schemas.datacontract.org/2004/07/WCFService")]
    [System.SerializableAttribute()]
    public partial class MachineDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MachineIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MachineNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineID {
            get {
                return this.MachineIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineIDField, value) != true)) {
                    this.MachineIDField = value;
                    this.RaisePropertyChanged("MachineID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineName {
            get {
                return this.MachineNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineNameField, value) != true)) {
                    this.MachineNameField = value;
                    this.RaisePropertyChanged("MachineName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMachine")]
    public interface IMachine {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMachine/Add")]
        void Add(AsyncClient.ServiceReference1.MachineDTO machineDTO);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IMachine/Add")]
        System.IAsyncResult BeginAdd(AsyncClient.ServiceReference1.MachineDTO machineDTO, System.AsyncCallback callback, object asyncState);
        
        void EndAdd(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMachine/GetMachineName", ReplyAction="http://tempuri.org/IMachine/GetMachineNameResponse")]
        string GetMachineName(AsyncClient.ServiceReference1.MachineDTO machineDTO);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMachine/GetMachineName", ReplyAction="http://tempuri.org/IMachine/GetMachineNameResponse")]
        System.IAsyncResult BeginGetMachineName(AsyncClient.ServiceReference1.MachineDTO machineDTO, System.AsyncCallback callback, object asyncState);
        
        string EndGetMachineName(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMachineChannel : AsyncClient.ServiceReference1.IMachine, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMachineNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMachineNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MachineClient : System.ServiceModel.ClientBase<AsyncClient.ServiceReference1.IMachine>, AsyncClient.ServiceReference1.IMachine {
        
        private BeginOperationDelegate onBeginAddDelegate;
        
        private EndOperationDelegate onEndAddDelegate;
        
        private System.Threading.SendOrPostCallback onAddCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMachineNameDelegate;
        
        private EndOperationDelegate onEndGetMachineNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetMachineNameCompletedDelegate;
        
        public MachineClient() {
        }
        
        public MachineClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MachineClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MachineClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MachineClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddCompleted;
        
        public event System.EventHandler<GetMachineNameCompletedEventArgs> GetMachineNameCompleted;
        
        public void Add(AsyncClient.ServiceReference1.MachineDTO machineDTO) {
            base.Channel.Add(machineDTO);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAdd(AsyncClient.ServiceReference1.MachineDTO machineDTO, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAdd(machineDTO, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAdd(System.IAsyncResult result) {
            base.Channel.EndAdd(result);
        }
        
        private System.IAsyncResult OnBeginAdd(object[] inValues, System.AsyncCallback callback, object asyncState) {
            AsyncClient.ServiceReference1.MachineDTO machineDTO = ((AsyncClient.ServiceReference1.MachineDTO)(inValues[0]));
            return this.BeginAdd(machineDTO, callback, asyncState);
        }
        
        private object[] OnEndAdd(System.IAsyncResult result) {
            this.EndAdd(result);
            return null;
        }
        
        private void OnAddCompleted(object state) {
            if ((this.AddCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddAsync(AsyncClient.ServiceReference1.MachineDTO machineDTO) {
            this.AddAsync(machineDTO, null);
        }
        
        public void AddAsync(AsyncClient.ServiceReference1.MachineDTO machineDTO, object userState) {
            if ((this.onBeginAddDelegate == null)) {
                this.onBeginAddDelegate = new BeginOperationDelegate(this.OnBeginAdd);
            }
            if ((this.onEndAddDelegate == null)) {
                this.onEndAddDelegate = new EndOperationDelegate(this.OnEndAdd);
            }
            if ((this.onAddCompletedDelegate == null)) {
                this.onAddCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddCompleted);
            }
            base.InvokeAsync(this.onBeginAddDelegate, new object[] {
                        machineDTO}, this.onEndAddDelegate, this.onAddCompletedDelegate, userState);
        }
        
        public string GetMachineName(AsyncClient.ServiceReference1.MachineDTO machineDTO) {
            return base.Channel.GetMachineName(machineDTO);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMachineName(AsyncClient.ServiceReference1.MachineDTO machineDTO, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMachineName(machineDTO, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetMachineName(System.IAsyncResult result) {
            return base.Channel.EndGetMachineName(result);
        }
        
        private System.IAsyncResult OnBeginGetMachineName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            AsyncClient.ServiceReference1.MachineDTO machineDTO = ((AsyncClient.ServiceReference1.MachineDTO)(inValues[0]));
            return this.BeginGetMachineName(machineDTO, callback, asyncState);
        }
        
        private object[] OnEndGetMachineName(System.IAsyncResult result) {
            string retVal = this.EndGetMachineName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMachineNameCompleted(object state) {
            if ((this.GetMachineNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMachineNameCompleted(this, new GetMachineNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMachineNameAsync(AsyncClient.ServiceReference1.MachineDTO machineDTO) {
            this.GetMachineNameAsync(machineDTO, null);
        }
        
        public void GetMachineNameAsync(AsyncClient.ServiceReference1.MachineDTO machineDTO, object userState) {
            if ((this.onBeginGetMachineNameDelegate == null)) {
                this.onBeginGetMachineNameDelegate = new BeginOperationDelegate(this.OnBeginGetMachineName);
            }
            if ((this.onEndGetMachineNameDelegate == null)) {
                this.onEndGetMachineNameDelegate = new EndOperationDelegate(this.OnEndGetMachineName);
            }
            if ((this.onGetMachineNameCompletedDelegate == null)) {
                this.onGetMachineNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMachineNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetMachineNameDelegate, new object[] {
                        machineDTO}, this.onEndGetMachineNameDelegate, this.onGetMachineNameCompletedDelegate, userState);
        }
    }
}
